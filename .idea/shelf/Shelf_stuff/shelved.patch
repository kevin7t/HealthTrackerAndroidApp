Index: app/src/main/java/kevin/androidhealthtracker/datamodels/DailyCalories.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kevin.androidhealthtracker.datamodels;\n\n\nimport android.arch.persistence.room.ColumnInfo;\nimport android.arch.persistence.room.Entity;\nimport android.arch.persistence.room.PrimaryKey;\nimport android.support.annotation.NonNull;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n\n@Data\n@AllArgsConstructor\n@Entity(tableName = \"dailycalories_table\")\npublic class DailyCalories {\n\n    public DailyCalories(String date, int goalCalories){\n        this.date = date;\n        this.goalCalories = goalCalories;\n        consumedCalories = 0;\n        burntCalories = 0;\n    }\n\n    @PrimaryKey\n    @ColumnInfo(name = \"date\")\n    @NonNull\n    private String date;\n\n    @ColumnInfo(name = \"goalcalories\")\n    private int goalCalories;\n\n    @ColumnInfo(name = \"consumedcalories\")\n    private int consumedCalories;\n\n    @ColumnInfo(name = \"burntcalories\")\n    private int burntCalories;\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/kevin/androidhealthtracker/datamodels/DailyCalories.java	(revision 812935ffa537ae8e3be35996c75c3f2b99d8bd86)
+++ app/src/main/java/kevin/androidhealthtracker/datamodels/DailyCalories.java	(date 1547653914000)
@@ -15,7 +15,7 @@
 @Entity(tableName = "dailycalories_table")
 public class DailyCalories {
 
-    public DailyCalories(String date, int goalCalories){
+    public DailyCalories(String date, int goalCalories) {
         this.date = date;
         this.goalCalories = goalCalories;
         consumedCalories = 0;
@@ -36,4 +36,25 @@
     @ColumnInfo(name = "burntcalories")
     private int burntCalories;
 
+    public void incrementConsumedCalories(int value) {
+        consumedCalories += value;
+    }
+
+    public void decrementConsumedCalories(int value) {
+        if (consumedCalories - value >= 0) {
+            consumedCalories -= value;
+        }
+    }
+
+    public void incrementBurntCalories(int value) {
+        burntCalories += value;
+    }
+
+    public void decrementBurntCalories(int value) {
+        if (burntCalories - value >= 0) {
+            burntCalories -= value;
+        }
+    }
+
+
 }
Index: app/src/main/java/kevin/androidhealthtracker/InputUserHealthDataActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kevin.androidhealthtracker;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.widget.CompoundButton;\nimport android.widget.EditText;\nimport android.widget.Switch;\nimport android.widget.Toast;\n\nimport org.springframework.web.client.RestClientException;\n\nimport kevin.androidhealthtracker.datamodels.Gender;\nimport kevin.androidhealthtracker.datamodels.UserCalorieProfile;\n\npublic class InputUserHealthDataActivity extends AppCompatActivity {\n    private SharedPreferences.Editor editor;\n    private String USER_SETUP_STATUS = \"user_setup_status\";\n    private Switch genderSwitchItem;\n    private EditText ageEditText, weightEditText, heightEditText;\n    private String gender = Gender.Male;\n    private int age;\n    private String weight,height;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_input_user_health_data);\n        Toolbar toolbar = findViewById(R.id.toolbar);\n//        toolbar.setTitle(\"Input Health Data\");\n        setSupportActionBar(toolbar);\n        editor = getSharedPreferences(\"SharedPreferences\", Context.MODE_PRIVATE).edit();\n        genderSwitchItem = findViewById(R.id.genderSwitchItem);\n        ageEditText = findViewById(R.id.AgeEditText);\n        weightEditText = findViewById(R.id.WeightEditText);\n        heightEditText = findViewById(R.id.HeightEditText);\n        genderSwitchItem.setOnCheckedChangeListener(onCheckedChangeListener);\n\n\n    }\n\n    private CompoundButton.OnCheckedChangeListener onCheckedChangeListener = new CompoundButton.OnCheckedChangeListener() {\n        @Override\n        public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {\n            if(isChecked){\n                gender = Gender.Female;\n            }else{\n                gender = Gender.Male;\n            }\n        }\n    };\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_new_status, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_post) {\n            try {\n                setupCalorieGoals(gender,\n                        Integer.valueOf(ageEditText.getText().toString()),\n                        Float.valueOf(weightEditText.getText().toString()),\n                        Float.valueOf(heightEditText.getText().toString()));\n                Toast.makeText(this, \"Done\", Toast.LENGTH_LONG).show();\n                setResult(RESULT_OK);\n                finish();\n            } catch (RestClientException e) {\n                e.printStackTrace();\n            }\n\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    private UserCalorieProfile setupCalorieGoals(String gender, int age, Float weight, Float height) {\n        UserCalorieProfile profile = new UserCalorieProfile();\n        profile.setGender(gender);\n        profile.setAge(age);\n        profile.setWeight(weight);\n        profile.setHeight(height);\n        editor.putString(\"gender\", gender);\n        editor.putInt(\"age\", age);\n        editor.putFloat(\"weight\", weight);\n        editor.putFloat(\"height\", height);\n        editor.putInt(\"lowcalories\", profile.getLowCalories());\n        editor.putInt(\"mediumcalories\", profile.getMediumCalories());\n        editor.putInt(\"highcalories\", profile.getHighCalories());\n        editor.putBoolean(USER_SETUP_STATUS, true);\n        editor.apply();\n        return profile;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/kevin/androidhealthtracker/InputUserHealthDataActivity.java	(revision 812935ffa537ae8e3be35996c75c3f2b99d8bd86)
+++ app/src/main/java/kevin/androidhealthtracker/InputUserHealthDataActivity.java	(date 1547653914000)
@@ -23,8 +23,6 @@
     private Switch genderSwitchItem;
     private EditText ageEditText, weightEditText, heightEditText;
     private String gender = Gender.Male;
-    private int age;
-    private String weight,height;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
Index: app/src/main/java/kevin/androidhealthtracker/fragments/UserProgressFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kevin.androidhealthtracker.fragments;\n\nimport android.app.Fragment;\nimport android.arch.persistence.room.Room;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.res.Resources;\nimport android.database.sqlite.SQLiteConstraintException;\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport kevin.androidhealthtracker.InputUserHealthDataActivity;\nimport kevin.androidhealthtracker.MainActivity;\nimport kevin.androidhealthtracker.R;\nimport kevin.androidhealthtracker.database.HealthTrackerDatabase;\nimport kevin.androidhealthtracker.datamodels.DailyCalories;\nimport kevin.androidhealthtracker.datamodels.Weight;\n\nimport static android.app.Activity.RESULT_OK;\n\npublic class UserProgressFragment extends Fragment {\n    private String USER_SETUP_STATUS = \"user_setup_status\";\n    private static final String DATABASE_NAME = \"healthtracker_db\";\n\n    private HealthTrackerDatabase healthTrackerDatabase;\n\n    private Boolean USER_SETUP_STATUS_BOOLEAN;\n    private static final int USER_DATA_REQUEST_CODE = 7;\n\n    private View view;\n    private ProgressBar calorieProgressBar;\n    private FloatingActionButton floatingActionButton;\n    private SharedPreferences prefs;\n    private SharedPreferences.Editor editor;\n    private Button increaseConsumedCalories, decreaseConsumedCalories, increaseBurntCalories, decreaseBurntCalories;\n    private EditText consumedCaloriesEditText, burntCaloriesEditText;\n    private Integer goalCalories, consumedCalories, burntCalories, netCalories, progress;\n\n    private TextView goalCaloriesTextView, consumedCaloriesTextView, burntCaloriesTextView, netCaloriesTextView;\n    private ExecutorService executor;\n\n    private DailyCalories dailyCalories;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        view = inflater.inflate(R.layout.fragment_progressfragment, container, false);\n        calorieProgressBar = view.findViewById(R.id.CalorieProgressBar);\n        goalCaloriesTextView = view.findViewById(R.id.CalorieGoalValue);\n        consumedCaloriesTextView = view.findViewById(R.id.ConsumedCalorieValue);\n        burntCaloriesTextView = view.findViewById(R.id.BurntCaloriesValue);\n        netCaloriesTextView = view.findViewById(R.id.NetCalorieValue);\n\n        consumedCaloriesEditText = view.findViewById(R.id.calorieIntakeEditText);\n        burntCaloriesEditText = view.findViewById(R.id.burntCaloriesEditText);\n\n        increaseConsumedCalories = view.findViewById(R.id.increaseConsumedCaloriesButton);\n        decreaseConsumedCalories = view.findViewById(R.id.decreaseConsumedCaloriesButton);\n        increaseBurntCalories = view.findViewById(R.id.increaseBurntCaloriesButton);\n        decreaseBurntCalories = view.findViewById(R.id.decreaseBurntCaloriesButton);\n\n        increaseConsumedCalories.setOnClickListener(increaseCaloriesConsumedListener);\n        decreaseConsumedCalories.setOnClickListener(decreaseCaloriesConsumedListener);\n        increaseBurntCalories.setOnClickListener(increaseBurntCaloriesListener);\n        decreaseBurntCalories.setOnClickListener(decreaseBurntCaloriesListener);\n\n        executor = Executors.newFixedThreadPool(2);\n        prefs = MainActivity.prefs;\n        editor = this.getActivity().getSharedPreferences(\"SharedPreferences\", Context.MODE_PRIVATE).edit();\n        floatingActionButton = view.findViewById(R.id.fab);\n        floatingActionButton.setOnClickListener(floatingActionButtonListener);\n        healthTrackerDatabase = Room.databaseBuilder(getActivity().getApplicationContext(),\n                HealthTrackerDatabase.class, DATABASE_NAME).fallbackToDestructiveMigration().build();\n        /**\n         * Get calories from DB\n         */\n        try {\n            dailyCalories = getTodaysCalories();\n        } catch (ExecutionException | InterruptedException | ParseException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            USER_SETUP_STATUS_BOOLEAN = prefs.getBoolean(USER_SETUP_STATUS, false);\n        } catch (NullPointerException e) {\n            e.printStackTrace();\n        }\n        //TODO: Reset calorie tracking per day, use prefs to store string of date and match to current date on activity launch\n\n\n        //TODO: save weight and calories to database and retrieve them on activity creation\n        //First store user details, then store the weight with a date for the graph\n\n        if (USER_SETUP_STATUS_BOOLEAN == false) {\n            //Show user profile setup fragment\n            Intent userSetupIntent = new Intent(getActivity(), InputUserHealthDataActivity.class);\n            startActivityForResult(userSetupIntent, USER_DATA_REQUEST_CODE);\n        } else {\n            try {\n                refreshProgress();\n            } catch (Resources.NotFoundException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n\n\n//        testDB();\n        return view;\n    }\n\n    private void refreshProgress() {\n        goalCalories = dailyCalories.getGoalCalories();\n        consumedCalories = dailyCalories.getConsumedCalories();\n        burntCalories = dailyCalories.getBurntCalories();\n        netCalories = consumedCalories - burntCalories;\n        double percentage = (double) netCalories / (double) goalCalories * 100;\n        progress = (int) Math.round(percentage);\n\n        calorieProgressBar.setProgress(progress);\n        goalCaloriesTextView.setText(goalCalories.toString());\n        consumedCaloriesTextView.setText(consumedCalories.toString());\n        consumedCaloriesEditText.setText(consumedCalories.toString());\n        burntCaloriesTextView.setText(burntCalories.toString());\n        burntCaloriesEditText.setText(burntCalories.toString());\n        netCaloriesTextView.setText(netCalories.toString());\n        saveCaloriesToDB();\n    }\n\n    private View.OnClickListener floatingActionButtonListener = view -> {\n        Intent userSetupIntent = new Intent(getActivity(), InputUserHealthDataActivity.class);\n        startActivityForResult(userSetupIntent, USER_DATA_REQUEST_CODE);\n    };\n\n    private View.OnClickListener increaseCaloriesConsumedListener = view -> {\n        consumedCalories += 100;\n        consumedCaloriesEditText.setText(consumedCalories.toString());\n        dailyCalories.setConsumedCalories(consumedCalories);\n        refreshProgress();\n    };\n\n    private View.OnClickListener decreaseCaloriesConsumedListener = view -> {\n        if (consumedCalories - 100 >= 0) {\n            consumedCalories -= 100;\n        }\n        consumedCaloriesEditText.setText(consumedCalories.toString());\n        dailyCalories.setConsumedCalories(consumedCalories);\n        refreshProgress();\n    };\n\n    private View.OnClickListener increaseBurntCaloriesListener = view -> {\n        burntCalories += 100;\n        burntCaloriesEditText.setText(burntCalories.toString());\n        dailyCalories.setBurntCalories(burntCalories);\n        refreshProgress();\n    };\n\n    private View.OnClickListener decreaseBurntCaloriesListener = view -> {\n        if (burntCalories - 100 >= 0) {\n            burntCalories -= 100;\n        }\n        burntCaloriesEditText.setText(burntCalories.toString());\n        dailyCalories.setBurntCalories(burntCalories);\n        refreshProgress();\n    };\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == USER_DATA_REQUEST_CODE) {\n            if (resultCode == RESULT_OK) {\n                try {\n                    USER_SETUP_STATUS_BOOLEAN = prefs.getBoolean(USER_SETUP_STATUS, false);\n                    refreshProgress();\n                } catch (Resources.NotFoundException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private void testDB() {\n\n        try {\n            System.out.println(getAllWeightFromDB().get());\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n\n        String date = null;\n        try {\n            date = getTodaysDate();\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        Weight weight = new Weight();\n        weight.setDate(date);\n        weight.setWeight(60.0f);\n        saveWeightToDB(weight);\n        Future<Weight> weightFuture = getWeightFromDB(date);\n        if (weightFuture.isDone()) {\n            try {\n                System.out.println(weightFuture.get().toString());\n            } catch (InterruptedException | ExecutionException e) {\n                e.printStackTrace();\n            }\n        }\n        try {\n            System.out.println(getAllWeightFromDB().get());\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String getTodaysDate() throws ParseException {\n        SimpleDateFormat formatter = new SimpleDateFormat(\n                \"dd/MM/yyyy\");\n        return formatter.parse(formatter.format(new Date())).toString();\n    }\n\n    private void saveWeightToDB(Weight weight) {\n        new Thread(() -> {\n            try {\n                healthTrackerDatabase.weightDAO().insert(weight);\n            } catch (SQLiteConstraintException e) {\n                healthTrackerDatabase.weightDAO().update(weight);\n            }\n        }).start();\n    }\n\n    private Future<Weight> getWeightFromDB(String date) {\n        Callable<Weight> task = () -> {\n            Weight weight = null;\n            try {\n                weight = healthTrackerDatabase.weightDAO().getByDate(date);\n            } catch (NullPointerException e) {\n                e.printStackTrace();\n            }\n            return weight;\n        };\n\n        Future<Weight> weightFuture = executor.submit(task);\n        return weightFuture;\n    }\n\n    private Future<List<Weight>> getAllWeightFromDB() {\n        Callable<List<Weight>> task = () -> {\n            List<Weight> weightList = null;\n            try {\n                weightList = healthTrackerDatabase.weightDAO().getAll();\n            } catch (NullPointerException e) {\n                e.printStackTrace();\n            }\n            return weightList;\n        };\n\n        Future<List<Weight>> weightFuture = executor.submit(task);\n        return weightFuture;\n    }\n\n    private void saveCaloriesToDB() {\n        new Thread(() -> {\n            try {\n                healthTrackerDatabase.dailyCaloriesDAO().insert(dailyCalories);\n            } catch (SQLiteConstraintException e) {\n                healthTrackerDatabase.dailyCaloriesDAO().update(dailyCalories);\n            }\n        }).start();\n    }\n\n    private Future<DailyCalories> getCaloriesFromDB(String date) {\n        Callable<DailyCalories> task = () -> {\n            DailyCalories dailyCalories = null;\n            try {\n                dailyCalories = healthTrackerDatabase.dailyCaloriesDAO().getByDate(date);\n            } catch (NullPointerException e) {\n                e.printStackTrace();\n            }\n            return dailyCalories;\n        };\n\n        Future<DailyCalories> dailyCaloriesFuture = executor.submit(task);\n        return dailyCaloriesFuture;\n    }\n\n    private Future<List<DailyCalories>> getAllCaloriesFromDB() {\n        Callable<List<DailyCalories>> task = () -> {\n            List<DailyCalories> dailyCaloriesList = null;\n            try {\n                dailyCaloriesList = healthTrackerDatabase.dailyCaloriesDAO().getAll();\n            } catch (NullPointerException e) {\n                e.printStackTrace();\n            }\n            return dailyCaloriesList;\n        };\n\n        Future<List<DailyCalories>> dailyCaloriesFuture = executor.submit(task);\n        return dailyCaloriesFuture;\n    }\n\n    private DailyCalories getTodaysCalories() throws ExecutionException, InterruptedException, ParseException {\n        Future<DailyCalories> result = getCaloriesFromDB(getTodaysDate());\n        DailyCalories calories = null;\n        if (result.isDone()){\n            calories = result.get();\n        }\n        if(calories == null){\n            dailyCalories = new DailyCalories(getTodaysDate(),getUserCalorieLevel());\n            saveCaloriesToDB();\n            refreshProgress();\n            return dailyCalories;\n        } else {\n            return calories;\n        }\n    }\n\n    private Boolean checkIfCaloriesIsOutOfDate(DailyCalories calories) throws ParseException {\n        if (calories.getDate().equals(getTodaysDate())) {\n            return false;\n        }\n        return true;\n    }\n\n    private int getUserCalorieLevel() {\n        return prefs.getInt(\"lowcalories\", 0);\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/kevin/androidhealthtracker/fragments/UserProgressFragment.java	(revision 812935ffa537ae8e3be35996c75c3f2b99d8bd86)
+++ app/src/main/java/kevin/androidhealthtracker/fragments/UserProgressFragment.java	(date 1547654698000)
@@ -52,12 +52,11 @@
     private SharedPreferences.Editor editor;
     private Button increaseConsumedCalories, decreaseConsumedCalories, increaseBurntCalories, decreaseBurntCalories;
     private EditText consumedCaloriesEditText, burntCaloriesEditText;
-    private Integer goalCalories, consumedCalories, burntCalories, netCalories, progress;
-
     private TextView goalCaloriesTextView, consumedCaloriesTextView, burntCaloriesTextView, netCaloriesTextView;
     private ExecutorService executor;
 
     private DailyCalories dailyCalories;
+    private Weight weight;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
@@ -83,7 +82,7 @@
         increaseBurntCalories.setOnClickListener(increaseBurntCaloriesListener);
         decreaseBurntCalories.setOnClickListener(decreaseBurntCaloriesListener);
 
-        executor = Executors.newFixedThreadPool(2);
+        executor = Executors.newFixedThreadPool(1);
         prefs = MainActivity.prefs;
         editor = this.getActivity().getSharedPreferences("SharedPreferences", Context.MODE_PRIVATE).edit();
         floatingActionButton = view.findViewById(R.id.fab);
@@ -99,16 +98,17 @@
             e.printStackTrace();
         }
 
+        /**
+         * Get weight from DB
+         */
+
         try {
             USER_SETUP_STATUS_BOOLEAN = prefs.getBoolean(USER_SETUP_STATUS, false);
         } catch (NullPointerException e) {
             e.printStackTrace();
         }
-        //TODO: Reset calorie tracking per day, use prefs to store string of date and match to current date on activity launch
 
-
-        //TODO: save weight and calories to database and retrieve them on activity creation
-        //First store user details, then store the weight with a date for the graph
+        //TODO: save weight to database and retrieve them on activity creation
 
         if (USER_SETUP_STATUS_BOOLEAN == false) {
             //Show user profile setup fragment
@@ -124,18 +124,17 @@
         }
 
 
-
 //        testDB();
         return view;
     }
 
     private void refreshProgress() {
-        goalCalories = dailyCalories.getGoalCalories();
-        consumedCalories = dailyCalories.getConsumedCalories();
-        burntCalories = dailyCalories.getBurntCalories();
-        netCalories = consumedCalories - burntCalories;
+        Integer goalCalories = dailyCalories.getGoalCalories();
+        Integer consumedCalories = dailyCalories.getConsumedCalories();
+        Integer burntCalories = dailyCalories.getBurntCalories();
+        Integer netCalories = consumedCalories - burntCalories;
         double percentage = (double) netCalories / (double) goalCalories * 100;
-        progress = (int) Math.round(percentage);
+        Integer progress = (int) Math.round(percentage);
 
         calorieProgressBar.setProgress(progress);
         goalCaloriesTextView.setText(goalCalories.toString());
@@ -153,40 +152,33 @@
     };
 
     private View.OnClickListener increaseCaloriesConsumedListener = view -> {
-        consumedCalories += 100;
-        consumedCaloriesEditText.setText(consumedCalories.toString());
-        dailyCalories.setConsumedCalories(consumedCalories);
+        dailyCalories.incrementConsumedCalories(100);
+        consumedCaloriesEditText.setText(Integer.toString(dailyCalories.getConsumedCalories()));
         refreshProgress();
     };
 
     private View.OnClickListener decreaseCaloriesConsumedListener = view -> {
-        if (consumedCalories - 100 >= 0) {
-            consumedCalories -= 100;
-        }
-        consumedCaloriesEditText.setText(consumedCalories.toString());
-        dailyCalories.setConsumedCalories(consumedCalories);
+        dailyCalories.incrementBurntCalories(100);
+        consumedCaloriesEditText.setText(Integer.toString(dailyCalories.getConsumedCalories()));
         refreshProgress();
     };
 
     private View.OnClickListener increaseBurntCaloriesListener = view -> {
-        burntCalories += 100;
-        burntCaloriesEditText.setText(burntCalories.toString());
-        dailyCalories.setBurntCalories(burntCalories);
+        dailyCalories.incrementBurntCalories(100);
+        burntCaloriesEditText.setText(Integer.toString(dailyCalories.getBurntCalories()));
         refreshProgress();
     };
 
     private View.OnClickListener decreaseBurntCaloriesListener = view -> {
-        if (burntCalories - 100 >= 0) {
-            burntCalories -= 100;
-        }
-        burntCaloriesEditText.setText(burntCalories.toString());
-        dailyCalories.setBurntCalories(burntCalories);
+        dailyCalories.decrementBurntCalories(100);
+        burntCaloriesEditText.setText(Integer.toString(dailyCalories.getBurntCalories()));
         refreshProgress();
     };
 
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
+        //If user has come from the setup activity then refresh the items
         if (requestCode == USER_DATA_REQUEST_CODE) {
             if (resultCode == RESULT_OK) {
                 try {
@@ -322,12 +314,11 @@
     private DailyCalories getTodaysCalories() throws ExecutionException, InterruptedException, ParseException {
         Future<DailyCalories> result = getCaloriesFromDB(getTodaysDate());
         DailyCalories calories = null;
-        if (result.isDone()){
+        if (result.isDone()) {
             calories = result.get();
         }
-        if(calories == null){
-            dailyCalories = new DailyCalories(getTodaysDate(),getUserCalorieLevel());
-            saveCaloriesToDB();
+        if (calories == null) {
+            dailyCalories = new DailyCalories(getTodaysDate(), getUserCalorieLevel());
             refreshProgress();
             return dailyCalories;
         } else {
@@ -336,10 +327,7 @@
     }
 
     private Boolean checkIfCaloriesIsOutOfDate(DailyCalories calories) throws ParseException {
-        if (calories.getDate().equals(getTodaysDate())) {
-            return false;
-        }
-        return true;
+        return !calories.getDate().equals(getTodaysDate());
     }
 
     private int getUserCalorieLevel() {
